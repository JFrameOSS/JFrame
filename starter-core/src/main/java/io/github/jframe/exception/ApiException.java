package io.github.jframe.exception;

import lombok.Getter;

import java.io.Serial;

/**
 * Base class for all API-related exceptions within the JFrame framework.
 * <p>
 * This exception type encapsulates an {@link ApiError} instance, which describes
 * the specific API error that occurred, including a machine-readable error code
 * and a human-readable reason.
 * </p>
 *
 * <p>
 * When thrown, {@code ApiException} is automatically handled by the pre-configured
 * global exception handler in the framework. This ensures that consistent error
 * responses are returned to clients, following the standardized error format.
 * </p>
 */
@Getter
public class ApiException extends JFrameException {

    /** Unique serial id, generated by IntelliJ. */
    @Serial
    private static final long serialVersionUID = 9146345197810622183L;

    /** ApiError associated with this exception. */
    private final ApiError apiError;

    /**
     * Construct an API error.
     *
     * @param apiError the error code.
     */
    protected ApiException(final ApiError apiError) {
        this(apiError, null, null);
    }

    /**
     * Construct an API error with a custome message.
     *
     * @param apiError the error code.
     */
    protected ApiException(final ApiError apiError, final String message) {
        this(apiError, null, message);
    }

    /**
     * Construct an API error from a Throwable.
     *
     * @param apiError the error code
     * @param orig     the cause of the error
     */
    protected ApiException(final ApiError apiError, final Throwable orig) {
        this(apiError, orig, null);
    }

    /**
     * Construct an API error from a Throwable with a custom message.
     *
     * @param apiError the error code
     * @param orig     the cause of the error
     */
    protected ApiException(final ApiError apiError, final Throwable orig, final String message) {
        super(message, orig);
        this.apiError = apiError;
    }

    /**
     * Convenience method to retrieve the error code from the contained API error.
     *
     * @return the error code
     */
    public String getErrorCode() {
        return apiError == null ? null : apiError.errorCode();
    }

    /**
     * Convenience method to retrieve the reason from the contained API error.
     *
     * @return the reason
     */
    public String getReason() {
        return apiError == null ? null : apiError.reason();
    }
}
